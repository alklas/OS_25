Исследование поведения программы с процессом-родителем и процессом-ребёнком, выполняющими разные действия
Цель: выяснить по поведению процессов, насколько процесс-ребёнок независим от процесса-родителя

Исходный код программы:
//Программа, порождающая дочерний процесс (часть 2).
//Процесс-родитель и процесс-ребёнок должны выполнять разные действия
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
int main() {
        pid_t procid, pprocid;
        int a=0, b;
        procid = getpid();
        pprocid = getppid();
        printf("До вызова fork()\n");
        printf("Ид. текущ. процесса: %d\nИд. род. процесса: %d\n", procid, pprocid);
        printf("Начальное значение a: %d\n", a);
        b = fork();
        if (b<0) {
                //Во время выполнения fork() произошла ошибка. Выходим из программы с возвратом кода -1
                printf("Ошибка при выполнении fork()\n");
                exit(-1); //выход из программы
        }
        else if (b==0) {
                printf("\n\nПоявился дочерний процесс, получил значение %d\n", b);
                a = a+1; //проверяем изменение значения переменной a
                procid = getpid();
                pprocid = getppid();
                printf("После вызова fork() в процессе-ребёнке\n");
                printf("Ид. текущ. процесса: %d\nИд. род. процесса: %d\nНовое значение a: %d\n", procid, pprocid, a);
        }
        else {
                printf("\n\nРодительский процесс после вызова fork() получил ид. ребёнка: %d\n", b);
                a = a+1111; //проверяем изменение значения переменной a
                procid = getpid();
                pprocid = getppid();
                printf("Идентификаторы процесса-родителя:\n");
                printf("Ид. текущ. процесса: %d\nИд. род. процесса: %d\nНовое значение a: %d\n", procid, pprocid, a);
        }
        return 0;
}

Результат выполнения программы:
-----

До вызова fork():
Значение переменной a: 0
Ид. текущего процесса: 17738
Ид. родителя: 17652


Родительский процесс после вызова fork() получил ид. ребёнка: 17740
Идентификаторы процесса-родителя:
Ид. текущ. процесса: 17738
Ид. род. процесса: 17652
Новое значение a: 1111


Появился дочерний процесс, получил значение 0
После вызова fork() в процессе-ребёнке
Ид. текущ. процесса: 17740
Ид. род. процесса: 1
Новое значение a: 1

----
Значение переменной a внутри процесса-ребёнка не зависит от значения переменной a внутри процесса-родителя. Из чего можно сделать вывод, что ребёнок и родитель выполняются в отдельных адресных пространствах.

Для процесса-ребёнка родителем оказался процесс с ид. 1, что означает удочерение процесса операционной системой в связи с тем, что родитель дочернего процесса закончил исполнение раньше, чем мы получили ид. родителя системным вызовом getppid().
